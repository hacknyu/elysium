// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/src/Css.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");
var Types$ReactTemplate = require("./Types.bs.js");

var project = Css.style(/* :: */[
      Css.display(/* flex */-1010954439),
      /* :: */[
        Css.flexDirection(Css.column),
        /* :: */[
          Css.alignItems(Css.center),
          /* :: */[
            Css.justifyContent(Css.center),
            /* :: */[
              Css.minWidth(Css.vw(90.0)),
              /* :: */[
                Css.color(Css.hex("232c33")),
                /* [] */0
              ]
            ]
          ]
        ]
      ]
    ]);

var Styles = /* module */[/* project */project];

var component = ReasonReact.statelessComponent("ProjectPage");

var ppx_printed_query = "query getProjectBySlug($slug: String!)  {\nprojectBySlug(slug: $slug)  {\nid  \nname  \nslug  \ncolor  \ndescription  \n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "projectBySlug");
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeObject(Caml_option.valFromOption(match$1));
      if (match$2 !== undefined) {
        var value$1 = Caml_option.valFromOption(match$2);
        var match$3 = Js_dict.get(value$1, "id");
        var tmp$1;
        if (match$3 !== undefined) {
          var value$2 = Caml_option.valFromOption(match$3);
          var match$4 = Js_json.decodeNumber(value$2);
          tmp$1 = match$4 !== undefined ? match$4 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$2));
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type Project is missing");
        }
        var match$5 = Js_dict.get(value$1, "name");
        var tmp$2;
        if (match$5 !== undefined) {
          var value$3 = Caml_option.valFromOption(match$5);
          var match$6 = Js_json.decodeString(value$3);
          tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
        } else {
          tmp$2 = Js_exn.raiseError("graphql_ppx: Field name on type Project is missing");
        }
        var match$7 = Js_dict.get(value$1, "slug");
        var tmp$3;
        if (match$7 !== undefined) {
          var value$4 = Caml_option.valFromOption(match$7);
          var match$8 = Js_json.decodeString(value$4);
          tmp$3 = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
        } else {
          tmp$3 = Js_exn.raiseError("graphql_ppx: Field slug on type Project is missing");
        }
        var match$9 = Js_dict.get(value$1, "color");
        var tmp$4;
        if (match$9 !== undefined) {
          var value$5 = Caml_option.valFromOption(match$9);
          var match$10 = Js_json.decodeString(value$5);
          tmp$4 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
        } else {
          tmp$4 = Js_exn.raiseError("graphql_ppx: Field color on type Project is missing");
        }
        var match$11 = Js_dict.get(value$1, "description");
        var tmp$5;
        if (match$11 !== undefined) {
          var value$6 = Caml_option.valFromOption(match$11);
          var match$12 = Js_json.decodeNull(value$6);
          if (match$12 !== undefined) {
            tmp$5 = undefined;
          } else {
            var match$13 = Js_json.decodeString(value$6);
            tmp$5 = match$13 !== undefined ? match$13 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
          }
        } else {
          tmp$5 = undefined;
        }
        tmp = {
          id: tmp$1,
          name: tmp$2,
          slug: tmp$3,
          color: tmp$4,
          description: tmp$5
        };
      } else {
        tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
      }
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field projectBySlug on type Query is missing");
    }
    return {
            projectBySlug: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(slug, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "slug",
                  slug
                ]]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var slug = variables.slug;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "slug",
                  slug
                ]]),
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var GetProjectBySlug = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var GetProjectBySlugQuery = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

function make$1(_children, slug) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (_self) {
              var slugQuery = make(slug, /* () */0);
              return ReasonReact.element(undefined, undefined, Curry.app(GetProjectBySlugQuery[/* make */3], [
                              Caml_option.some(slugQuery.variables),
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              (function (param) {
                                  var result = param[/* result */0];
                                  if (typeof result === "number") {
                                    return React.createElement("div", undefined, "Loading");
                                  } else if (result.tag) {
                                    var project$1 = Types$ReactTemplate.projectFromJs(result[0].projectBySlug);
                                    var match = project$1[/* description */4];
                                    return React.createElement("div", {
                                                className: project
                                              }, React.createElement("h1", undefined, project$1[/* name */1]), React.createElement("p", undefined, match !== undefined ? match : "No description"));
                                  } else {
                                    return React.createElement("div", undefined, result[0].message);
                                  }
                                })
                            ]));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.Styles = Styles;
exports.component = component;
exports.GetProjectBySlug = GetProjectBySlug;
exports.GetProjectBySlugQuery = GetProjectBySlugQuery;
exports.make = make$1;
/* project Not a pure module */
